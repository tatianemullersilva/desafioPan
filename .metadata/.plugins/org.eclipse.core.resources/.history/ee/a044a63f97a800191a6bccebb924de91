package br.com.softplan.controller;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.softplan.model.Endereco;
import br.com.softplan.repository.EnderecoRepository;

@RestController
@RequestMapping("/endereco")
@CrossOrigin(origins = "*")
public class SourceController {

	@Autowired
	private EnderecoRepository enderecoRepository;

//	private ValidaCPF validaCPF;

	@RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<Collection<Endereco>> buscarTodos() {
		return new ResponseEntity<Collection<Endereco>>(this.enderecoRepository.findAll(), HttpStatus.OK);
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<Endereco> detalhes(@PathVariable Integer id) {
		return new ResponseEntity<Endereco>(this.enderecoRepository.findById(id).orElse(null), HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<Endereco> cadastrar(@RequestBody Endereco enderecoRequest) {

		Endereco endereco = this.enderecoRepository.save(enderecoRequest);
		HttpStatus status = endereco == null ? HttpStatus.BAD_REQUEST : HttpStatus.OK;
		return new ResponseEntity<Endereco>(endereco, status);
	}

	@RequestMapping(method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<Endereco> atualizar(@RequestBody Endereco enderecoRequest) {
		Endereco endereco = this.enderecoRepository.save(enderecoRequest);
		HttpStatus status = endereco == null ? HttpStatus.BAD_REQUEST : HttpStatus.OK;
		return new ResponseEntity<Endereco>(endereco, status);
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<Endereco> deletar(@PathVariable Integer id) {
		Endereco endereco = this.enderecoRepository.findById(id).orElse(null);
		HttpStatus status = endereco == null ? HttpStatus.NOT_FOUND : HttpStatus.OK;
		if (endereco != null)
			this.enderecoRepository.delete(endereco);
		return new ResponseEntity<Endereco>(status);
	}
}
